#include <GLEW/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>

//GLM Library
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <SOIL2/SOIL2.h>

using namespace std;

int width, height;
const double PI = 3.14159;
const float toRadians = PI / 180.0f;

//Input callback function prototypes  *
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
void cursor_position_callback(GLFWwindow* window, double xpos, double ypos);
void mouse_button_callback(GLFWwindow* window, int button, int action, int mods);

//DECLARE VIEW MATRIX
glm::mat4 viewMatrix;

//initialize FOV
GLfloat fov = 45.0f;

void initiateCamera();
void initCamera();

//Declare camera attributes *
glm::vec3 cameraPosition = glm::vec3(-2.0f, 6.0f, 4.0f); 	//Initial camera position. Placed S units in Z
glm::vec3 target = glm::vec3(0.0f, 1.5f, 0.0f);
glm::vec3 CameraDirection = glm::normalize(cameraPosition - target);
glm::vec3 worldUp = glm::vec3(0.0f, 1.0f, 0.0f);
glm::vec3 cameraRight = glm::normalize(glm::cross(worldUp, CameraDirection));
glm::vec3 cameraUp = glm::normalize(glm::cross(cameraRight, CameraDirection));
glm::vec3 cameraFront = glm::normalize(glm::vec3(0.0f, 0.0f, -1.0f));

//Get Target Prototype
glm::vec3 getTarget();

//Camera Transformation prototype
void TransformCamera();

//Booolean for keys and mouse buttons
bool keys[1024], mouseButtons[3];

//boolean to check camera trans
bool isPanning = false, isOrbiting = false;

//radius, pitch, yaw variables
GLfloat radius = 3.0f, rawYaw = 0.0f, rawPitch = 0.0f, degYaw, degPitch;

//Due to computer performance - Move per second
GLfloat deltaTime = 0.0f, lastFrame = 0.0;
GLfloat lastX = 320, lastY = 240, xChange, yChange;
bool firstMouseMove = true;			//Detect initial Mouse Move

//light source position
glm::vec3 lightPosition(1.5f, 3.0f, 2.0f);

//draw primitives  *
void draw() {
    GLenum mode = GL_TRIANGLES;
    GLsizei indices = 624;  //verified through 1331
    glDrawElements(mode, indices, GL_UNSIGNED_BYTE, nullptr);
}

void drawMid() {                   //CS-499 Enhancement
    GLenum mode = GL_TRIANGLES;
    GLsizei indices = 204;  //verified through 1331
    glDrawElements(mode, indices, GL_UNSIGNED_BYTE, nullptr);
}

//label draw primitives 
void drawLabel()
{
    GLenum mode = GL_TRIANGLES;
    GLsizei indices = 6;
    glDrawElements(mode, indices, GL_UNSIGNED_BYTE, nullptr);
}


// Create and Compile Shaders
static GLuint compileShader(const string& source, GLuint shaderType) {

    //create Shader object
    GLuint shaderID = glCreateShader(shaderType);
    const char* src = source.c_str();

    //Attach Source Code to Shader Object
    glShaderSource(shaderID, 1, &src, nullptr);

    //Compile shaders
    glCompileShader(shaderID);

    //Return ID of compiled shader
    return shaderID;
}


// Create Program Object *
static GLuint CreateShaderProgram(const string& vertexShader, const string& fragmentShader)
{
    //compile vertex shader
    GLuint vertexShaderComp = compileShader(vertexShader, GL_VERTEX_SHADER);
    //compile Frag shader
    GLuint fragmentShaderComp = compileShader(fragmentShader, GL_FRAGMENT_SHADER);

    // Create program obj
    GLuint shaderProgram = glCreateProgram();

    //attaches the  the shader program,
    glAttachShader(shaderProgram, vertexShaderComp);
    glAttachShader(shaderProgram, fragmentShaderComp);

    //link shaders
    glLinkProgram(shaderProgram);//links the shader program

    //Delete shaders
    glDeleteShader(vertexShaderComp);
    glDeleteShader(fragmentShaderComp);

    //return shader program
    return shaderProgram;
}


void BizCreateBuffers() {


}

int main(void)
{
    width = 1200; height = 1200;
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(width, height, "Bismark Aldana - 330 Final", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }


    //Set input callback funtions
    glfwSetKeyCallback(window, key_callback);
    glfwSetScrollCallback(window, scroll_callback);
    glfwSetCursorPosCallback(window, cursor_position_callback);
    glfwSetMouseButtonCallback(window, mouse_button_callback);



    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    //enable depth buffer
    glEnable(GL_DEPTH_TEST);

    // Define element vertices
    GLfloat labelVertices[] = {

        //Position                              //color               //label UB
        //CrossSection(.8125)                         
         0.6094f, 0.8125f, -0.3386f,        1.0f, 1.0f, 1.0f,       0.0f, 1.0f,      0.0f, 0.0f, -1.0f,  //56 (0)
        -0.6094f, 0.8125f, -0.3386f,        1.0f, 1.0f, 1.0f,       1.0f, 1.0f,      0.0f, 0.0f, -1.0f,  //62 (1)
        -0.6094f, 0.8125f,  0.3386f,        1.0f, 1.0f, 1.0f,       0.0f, 1.0f,      0.0f, 0.0f,  1.0f,  //66 (2)
         0.6094f, 0.8125f,  0.3386f,        1.0f, 1.0f, 1.0f,       1.0f, 1.0f,      0.0f, 0.0f,  1.0f,  //72 (3)


        //CrossSection(2.375)                         
         0.6094f, 2.3750f, -0.3386f,        1.0f, 1.0f, 1.0f,       0.0f, 0.0f,      0.0f, 0.0f, -1.0f,  //76 (4)
        -0.6094f, 2.3750f, -0.3386f,        1.0f, 1.0f, 1.0f,       1.0f, 0.0f,      0.0f, 0.0f, -1.0f,  //82 (5)
        -0.6094f, 2.3750f,  0.3386f,        1.0f, 1.0f, 1.0f,       0.0f, 0.0f,      0.0f, 0.0f,  1.0f,  //86 (6)
         0.6094f, 2.3750f,  0.3386f,        1.0f, 1.0f, 1.0f,       1.0f, 0.0f,      0.0f, 0.0f,  1.0f  //92 (7)
    };

    GLubyte frontLabelIndices[] = {
        2, 3, 6,             //Triangle 1
        3, 6, 7              //Triangle 2
 
    };

    GLubyte rearLabelIndices[] = {
        //Base (0.000) Chamfer to CrossSection(1.875)                
        0, 1, 4,             //Triangle 3
        1, 4, 5              //Triangle 4
    };

    GLfloat lampVertices[] = {
        -0.5, -0.5, 0.0,  // index 0
        -0.5,  0.5, 0.0,   // index 1
         0.5, -0.5, 0.0,  // index 2	
         0.5,  0.5, 0.0    // index 3	
    };

    // Define element indices
    GLubyte lampIndices[] = {
        0, 1, 2,
        1, 2, 3
    };


    // Define element vertices
    GLfloat verticesBot[] = {
        //Base (0.0000) - Verified                //Color                        //UV                     //Normal
             0.8125f,0.0000f, 0.0000f,      1.0f,1.0f,1.0f,                0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //0
             0.8125f,0.0000f,-0.2708f,      1.0f,1.0f,1.0f,                1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //1
             0.7109f,0.0000f,-0.2868f,      1.0f,1.0f,1.0f,                0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //2
             0.6094f,0.0000f,-0.3006f,      1.0f,1.0f,1.0f,                1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //3
             0.5078f,0.0000f,-0.3122f,      1.0f,1.0f,1.0f,                0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //4
             0.4063f,0.0000f,-0.3217f,      1.0f,1.0f,1.0f,                1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //5
             0.3047f,0.0000f,-0.3291f,      1.0f,1.0f,1.0f,                0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //6
             0.2031f,0.0000f,-0.3343f,      1.0f,1.0f,1.0f,                1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //7
             0.1016f,0.0000f,-0.3375f,      1.0f,1.0f,1.0f,                0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //8
             0.0000f,0.0000f,-0.3385f,      1.0f,1.0f,1.0f,                1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //9
            -0.1016f,0.0000f,-0.3375f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //10
            -0.2031f,0.0000f,-0.3343f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //11
            -0.3047f,0.0000f,-0.3291f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //12
            -0.4063f,0.0000f,-0.3217f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //13
            -0.5078f,0.0000f,-0.3122f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //14
            -0.6094f,0.0000f,-0.3006f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //15
            -0.7109f,0.0000f,-0.2868f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //16
            -0.8125f,0.0000f,-0.2708f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //17
            -0.8125f,0.0000f, 0.0000f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //18
            -0.8125f,0.0000f, 0.2708f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //19
            -0.7109f,0.0000f, 0.2868f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //20
            -0.6094f,0.0000f, 0.3006f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //21
            -0.5078f,0.0000f, 0.3122f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //22
            -0.4063f,0.0000f, 0.3217f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //23
            -0.3047f,0.0000f, 0.3291f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //24
            -0.2031f,0.0000f, 0.3343f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //25
            -0.1016f,0.0000f, 0.3375f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //26
             0.0000f,0.0000f, 0.3385f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //27
             0.1016f,0.0000f, 0.3375f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //28
             0.2031f,0.0000f, 0.3343f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //29
             0.3047f,0.0000f, 0.3291f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //30
             0.4063f,0.0000f, 0.3217f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //31
             0.5078f,0.0000f, 0.3122f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //32
             0.6094f,0.0000f, 0.3006f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //33
             0.7109f,0.0000f, 0.2868f,      1.0f,1.0f,1.0f,                 0.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //34
             0.8125f,0.0000f, 0.2708f,      1.0f,1.0f,1.0f,                 1.0f, 0.0f,              0.0f, -1.0f, 0.0f,        //35

            //CrossSection(1.875) - Ver
             1.0000f,0.1875f, 0.0000f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //36
             1.0000f,0.1875f,-0.3333f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //37
             0.8750f,0.1875f,-0.3530f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //38
             0.7500f,0.1875f,-0.3699f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //39
             0.6250f,0.1875f,-0.3843f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //40
             0.5000f,0.1875f,-0.3959f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //41
             0.3750f,0.1875f,-0.4050f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //42
             0.2500f,0.1875f,-0.4115f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //43
             0.1250f,0.1875f,-0.4154f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //44
             0.0000f,0.1875f,-0.4167f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //45
            -0.1250f,0.1875f,-0.4154f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //46
            -0.2500f,0.1875f,-0.4115f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //47
            -0.3750f,0.1875f,-0.4050f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //48
            -0.5000f,0.1875f,-0.3959f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //49
            -0.6250f,0.1875f,-0.3843f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //50
            -0.7500f,0.1875f,-0.3699f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //51
            -0.8750f,0.1875f,-0.3530f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //52
            -1.0000f,0.1875f,-0.3333f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //53
            -1.0000f,0.1875f, 0.0000f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //54
            -1.0000f,0.1875f, 0.3333f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //55
            -0.8750f,0.1875f, 0.3530f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //56
            -0.7500f,0.1875f, 0.3699f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //57
            -0.6250f,0.1875f, 0.3843f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //58
            -0.5000f,0.1875f, 0.3959f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //59
            -0.3750f,0.1875f, 0.4050f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //60
            -0.2500f,0.1875f, 0.4115f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //61
            -0.1250f,0.1875f, 0.4154f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //62
             0.0000f,0.1875f, 0.4167f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //63
             0.1250f,0.1875f, 0.4154f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //64
             0.2500f,0.1875f, 0.4115f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //65
             0.3750f,0.1875f, 0.4050f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //66
             0.5000f,0.1875f, 0.3959f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //67
             0.6250f,0.1875f, 0.3843f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //68
             0.7500f,0.1875f, 0.3699f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //69
             0.8750f,0.1875f, 0.3530f,      0.0f,255.0f,255.0f,                1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //70
             1.0000f,0.1875f, 0.3333f,      0.0f,255.0f,255.0f,                0.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //71

            //CrossSection(.6875) - Ver
             1.0000f,0.6875f, 0.0000f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              1.0f, 0.0f, 0.0f,        //72
             1.0000f,0.6875f,-0.3333f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              1.0f, 0.0f, 0.0f,        //73
             0.8750f,0.6875f,-0.3530f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //74
             0.7500f,0.6875f,-0.3699f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //75
             0.6250f,0.6875f,-0.3843f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //76
             0.5000f,0.6875f,-0.3959f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //77
             0.3750f,0.6875f,-0.4050f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //78
             0.2500f,0.6875f,-0.4115f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //79
             0.1250f,0.6875f,-0.4154f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //80
             0.0000f,0.6875f,-0.4167f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //81
            -0.1250f,0.6875f,-0.4154f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //82
            -0.2500f,0.6875f,-0.4115f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //83
            -0.3750f,0.6875f,-0.4050f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //84
            -0.5000f,0.6875f,-0.3959f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //85
            -0.6250f,0.6875f,-0.3843f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //86
            -0.7500f,0.6875f,-0.3699f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //87
            -0.8750f,0.6875f,-0.3530f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //88
            -1.0000f,0.6875f,-0.3333f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //89
            -1.0000f,0.6875f, 0.0000f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //90
            -1.0000f,0.6875f, 0.3333f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //91
            -0.8750f,0.6875f, 0.3530f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //92
            -0.7500f,0.6875f, 0.3699f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //93
            -0.6250f,0.6875f, 0.3843f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //94
            -0.5000f,0.6875f, 0.3959f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //95
            -0.3750f,0.6875f, 0.4050f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //96
            -0.2500f,0.6875f, 0.4115f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //97
            -0.1250f,0.6875f, 0.4154f,      0.0f, 255.0f, 255.0f,                 0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //98
             0.0000f,0.6875f, 0.4167f,      0.0f, 255.0f, 255.0f,                 1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //99
             0.1250f,0.6875f, 0.4154f,      0.0f, 255.0f, 255.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //100
             0.2500f,0.6875f, 0.4115f,      0.0f, 255.0f, 255.0f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //101
             0.3750f,0.6875f, 0.4050f,      0.0f, 255.0f, 255.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //102
             0.5000f,0.6875f, 0.3959f,      0.0f, 255.0f, 255.0f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //103
             0.6250f,0.6875f, 0.3843f,      0.0f, 255.0f, 255.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //104
             0.7500f,0.6875f, 0.3699f,      0.0f, 255.0f, 255.0f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //105
             0.8750f,0.6875f, 0.3530f,      0.0f, 255.0f, 255.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //106
             1.0000f,0.6875f, 0.3333f,      0.0f, 255.0f, 255.0f,                  1.0f, 0.0f,              1.0f, 0.0f, 0.0f,        //107

            //CrossSection(.8125) - Ver
             0.8125f, 0.8125f,  0.0000f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //108
             0.8125f, 0.8125f, -0.2708f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //109
             0.7109f, 0.8125f, -0.2868f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //110
             0.6094f, 0.8125f, -0.3006f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //111
             0.5078f, 0.8125f, -0.3122f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //112
             0.4063f, 0.8125f, -0.3217f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //113
             0.3047f, 0.8125f, -0.3291f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //114
             0.2031f, 0.8125f, -0.3343f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //115
             0.1016f, 0.8125f, -0.3375f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //116
             0.0000f, 0.8125f, -0.3385f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //117
            -0.1016f, 0.8125f, -0.3375f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //118
            -0.2031f, 0.8125f, -0.3343f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //119
            -0.3047f, 0.8125f, -0.3291f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //120
            -0.4063f, 0.8125f, -0.3217f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //121
            -0.5078f, 0.8125f, -0.3122f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //122
            -0.6094f, 0.8125f, -0.3006f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //123
            -0.7109f, 0.8125f, -0.2868f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //124
            -0.8125f, 0.8125f, -0.2708f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //125
            -0.8125f, 0.8125f,  0.0000f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //126
            -0.8125f, 0.8125f,  0.2708f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //127
            -0.7109f, 0.8125f,  0.2868f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //128
            -0.6094f, 0.8125f,  0.3006f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //129
            -0.5078f, 0.8125f,  0.3122f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //130
            -0.4063f, 0.8125f,  0.3217f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //131
            -0.3047f, 0.8125f,  0.3291f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //132
            -0.2031f, 0.8125f,  0.3343f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //133
            -0.1016f, 0.8125f,  0.3375f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //134
             0.0000f, 0.8125f,  0.3385f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //135
             0.1016f, 0.8125f,  0.3375f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //136
             0.2031f, 0.8125f,  0.3343f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //137
             0.3047f, 0.8125f,  0.3291f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //138
             0.4063f, 0.8125f,  0.3217f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //139
             0.5078f, 0.8125f,  0.3122f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //140
             0.6094f, 0.8125f,  0.3006f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //141
             0.7109f, 0.8125f,  0.2868f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //142
             0.8125f, 0.8125f,  0.2708f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              1.0f, 0.0f, 0.0f         //143
    };

    GLfloat verticesMid[] = {      //CS499 - Enchancement
        //CrossSection(.8125) - Ver
             0.8125f, 0.8125f,  0.0000f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //0
             0.8125f, 0.8125f, -0.2708f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //1
             0.7109f, 0.8125f, -0.2868f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //2
             0.6094f, 0.8125f, -0.3006f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //3
             0.5078f, 0.8125f, -0.3122f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //4
             0.4063f, 0.8125f, -0.3217f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //5
             0.3047f, 0.8125f, -0.3291f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //6
             0.2031f, 0.8125f, -0.3343f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //7
             0.1016f, 0.8125f, -0.3375f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //8
             0.0000f, 0.8125f, -0.3385f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //9
            -0.1016f, 0.8125f, -0.3375f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //10
            -0.2031f, 0.8125f, -0.3343f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //11
            -0.3047f, 0.8125f, -0.3291f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //12
            -0.4063f, 0.8125f, -0.3217f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //13
            -0.5078f, 0.8125f, -0.3122f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //14
            -0.6094f, 0.8125f, -0.3006f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //15
            -0.7109f, 0.8125f, -0.2868f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //16
            -0.8125f, 0.8125f, -0.2708f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //17
            -0.8125f, 0.8125f,  0.0000f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //18
            -0.8125f, 0.8125f,  0.2708f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //19
            -0.7109f, 0.8125f,  0.2868f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //20
            -0.6094f, 0.8125f,  0.3006f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //21
            -0.5078f, 0.8125f,  0.3122f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //22
            -0.4063f, 0.8125f,  0.3217f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //23
            -0.3047f, 0.8125f,  0.3291f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //24
            -0.2031f, 0.8125f,  0.3343f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //25
            -0.1016f, 0.8125f,  0.3375f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //26
             0.0000f, 0.8125f,  0.3385f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //27
             0.1016f, 0.8125f,  0.3375f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //28
             0.2031f, 0.8125f,  0.3343f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //29
             0.3047f, 0.8125f,  0.3291f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //30
             0.4063f, 0.8125f,  0.3217f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //31
             0.5078f, 0.8125f,  0.3122f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //32
             0.6094f, 0.8125f,  0.3006f,    1.1f, 1.1f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //33
             0.7109f, 0.8125f,  0.2868f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //34
             0.8125f, 0.8125f,  0.2708f,    1.1f, 1.1f, 1.1f,                  0.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //35

         //CrossSection(2.375) - Ver
             0.8125f, 2.375f,  0.0000f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              1.0f, 0.0f, 0.0f,        //36
             0.8125f, 2.375f, -0.2708f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              1.0f, 0.0f, 0.0f,        //37
             0.7109f, 2.375f, -0.2868f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //38
             0.6094f, 2.375f, -0.3006f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //39
             0.5078f, 2.375f, -0.3122f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //40
             0.4063f, 2.375f, -0.3217f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //41
             0.3047f, 2.375f, -0.3291f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //42
             0.2031f, 2.375f, -0.3343f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //43
             0.1016f, 2.375f, -0.3375f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //44
             0.0000f, 2.375f, -0.3385f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //45
            -0.1016f, 2.375f, -0.3375f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //46
            -0.2031f, 2.375f, -0.3343f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //47
            -0.3047f, 2.375f, -0.3291f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //48
            -0.4063f, 2.375f, -0.3217f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //49
            -0.5078f, 2.375f, -0.3122f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //50
            -0.6094f, 2.375f, -0.3006f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //51
            -0.7109f, 2.375f, -0.2868f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //52
            -0.8125f, 2.375f, -0.2708f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //53
            -0.8125f, 2.375f,  0.0000f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //54
            -0.8125f, 2.375f,  0.2708f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //55
            -0.7109f, 2.375f,  0.2868f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //56
            -0.6094f, 2.375f,  0.3006f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //57
            -0.5078f, 2.375f,  0.3122f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //58
            -0.4063f, 2.375f,  0.3217f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //59
            -0.3047f, 2.375f,  0.3291f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //60
            -0.2031f, 2.375f,  0.3343f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //61
            -0.1016f, 2.375f,  0.3375f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //62
             0.0000f, 2.375f,  0.3385f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //63
             0.1016f, 2.375f,  0.3375f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //64
             0.2031f, 2.375f,  0.3343f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //65
             0.3047f, 2.375f,  0.3291f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //66
             0.4063f, 2.375f,  0.3217f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //67
             0.5078f, 2.375f,  0.3122f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //68
             0.6094f, 2.375f,  0.3006f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //69
             0.7109f, 2.375f,  0.2868f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //70
             0.8125f, 2.375f,  0.2708f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              1.0f, 0.0f, 0.0f         //71


    };  //CS499 - Enchancement
    
    GLfloat verticesTop[] = {
        //CrossSection(3.1875) - Verified                //Color                        //UV                     //Normal
            0.8125f, 3.1875f, 0.0000f, 1.0f, 1.0f, 1.0f,          0.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //0
            0.8125f, 3.1875f, -0.2708f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //1
            0.7109f, 3.1875f, -0.2868f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //2
            0.6094f, 3.1875f, -0.3006f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //3
            0.5078f, 3.1875f, -0.3122f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //4
            0.4063f, 3.1875f, -0.3217f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //5
            0.3047f, 3.1875f, -0.3291f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //6
            0.2031f, 3.1875f, -0.3343f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //7
            0.1016f, 3.1875f, -0.3375f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //8
            0.0000f, 3.1875f, -0.3385f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //9
            -0.1016f, 3.1875f, -0.3375f, 1.0f, 1.0f, 1.0f,        0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //10
            -0.2031f, 3.1875f, -0.3343f, 1.0f, 1.0f, 1.0f,        1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //11
            -0.3047f, 3.1875f, -0.3291f, 1.0f, 1.0f, 1.0f,        0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //12
            -0.4063f, 3.1875f, -0.3217f, 1.0f, 1.0f, 1.0f,        1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //13
            -0.5078f, 3.1875f, -0.3122f, 1.0f, 1.0f, 1.0f,        0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //14
            -0.6094f, 3.1875f, -0.3006f, 1.0f, 1.0f, 1.0f,        1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //15
            -0.7109f, 3.1875f, -0.2868f, 1.0f, 1.0f, 1.0f,        0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //16
            -0.8125f, 3.1875f, -0.2708f, 1.0f, 1.0f, 1.0f,        1.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //17
            -0.8125f, 3.1875f, 0.0000f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //18
            -0.8125f, 3.1875f, 0.2708f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //19
            -0.7109f, 3.1875f, 0.2868f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //20
            -0.6094f, 3.1875f, 0.3006f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //21
            -0.5078f, 3.1875f, 0.3122f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //22
            -0.4063f, 3.1875f, 0.3217f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //23
            -0.3047f, 3.1875f, 0.3291f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //24
            -0.2031f, 3.1875f, 0.3343f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //25
            -0.1016f, 3.1875f, 0.3375f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //26
            0.0000f, 3.1875f, 0.3385f, 1.0f, 1.0f, 1.0f,          1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //27
            0.1016f, 3.1875f, 0.3375f, 1.0f, 1.0f, 1.0f,          0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //28
            0.2031f, 3.1875f, 0.3343f, 1.0f, 1.0f, 1.0f,          1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //29
            0.3047f, 3.1875f, 0.3291f, 1.0f, 1.0f, 1.0f,          0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //30
            0.4063f, 3.1875f, 0.3217f, 1.0f, 1.0f, 1.0f,          1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //31
            0.5078f, 3.1875f, 0.3122f, 1.0f, 1.0f, 1.0f,          0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //32
            0.6094f, 3.1875f, 0.3006f, 1.0f, 1.0f, 1.0f,          1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //33
            0.7109f, 3.1875f, 0.2868f, 1.0f, 1.0f, 1.0f,          0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //34
            0.8125f, 3.1875f, 0.2708f, 1.0f, 1.0f, 1.0f,           1.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //35

            //CrossSection(3.0000) - Ver
             1.0000f, 3.0000f,  0.0000f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              1.0f, 0.0f, 0.0f,        //36
             1.0000f, 3.0000f, -0.3333f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //37
             0.8750f, 3.0000f, -0.3530f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //38
             0.7500f, 3.0000f, -0.3699f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //39
             0.6250f, 3.0000f, -0.3843f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //40
             0.5000f, 3.0000f, -0.3959f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //41
             0.3750f, 3.0000f, -0.4050f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //42
             0.2500f, 3.0000f, -0.4115f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //43
             0.1250f, 3.0000f, -0.4154f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //44
             0.0000f, 3.0000f, -0.4167f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //45
            -0.1250f, 3.0000f, -0.4154f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //46
            -0.2500f, 3.0000f, -0.4115f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //47
            -0.3750f, 3.0000f, -0.4050f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //48
            -0.5000f, 3.0000f, -0.3959f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //49
            -0.6250f, 3.0000f, -0.3843f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //50
            -0.7500f, 3.0000f, -0.3699f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //51
            -0.8750f, 3.0000f, -0.3530f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //52
            -1.0000f, 3.0000f, -0.3333f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //53
            -1.0000f, 3.0000f,  0.0000f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //54
            -1.0000f, 3.0000f,  0.3333f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //55
            -0.8750f, 3.0000f,  0.3530f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //56
            -0.7500f, 3.0000f,  0.3699f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //57
            -0.6250f, 3.0000f,  0.3843f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //58
            -0.5000f, 3.0000f,  0.3959f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //59
            -0.3750f, 3.0000f,  0.4050f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //60
            -0.2500f, 3.0000f,  0.4115f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //61
            -0.1250f, 3.0000f,  0.4154f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //62
             0.0000f, 3.0000f,  0.4167f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //63
             0.1250f, 3.0000f,  0.4154f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //64
             0.2500f, 3.0000f,  0.4115f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //65
             0.3750f, 3.0000f,  0.4050f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //66
             0.5000f, 3.0000f,  0.3959f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //67
             0.6250f, 3.0000f,  0.3843f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //68
             0.7500f, 3.0000f,  0.3699f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //69
             0.8750f, 3.0000f,  0.3530f,    1.1f, 1.1f, 0.0f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //70
             1.0000f, 3.0000f,  0.3333f,    1.1f, 1.1f, 0.0f,                  1.0f, 0.0f,              1.0f, 0.0f, 0.0f,        //71

            //CrossSection(2.5000) - Ver
             1.0000f, 2.5000f,  0.0000f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //72
             1.0000f, 2.5000f, -0.3333f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //73
             0.8750f, 2.5000f, -0.3530f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //74
             0.7500f, 2.5000f, -0.3699f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //75
             0.6250f, 2.5000f, -0.3843f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //76
             0.5000f, 2.5000f, -0.3959f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //77
             0.3750f, 2.5000f, -0.4050f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //78
             0.2500f, 2.5000f, -0.4115f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //79
             0.1250f, 2.5000f, -0.4154f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //80
             0.0000f, 2.5000f, -0.4167f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //81
            -0.1250f, 2.5000f, -0.4154f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //82
            -0.2500f, 2.5000f, -0.4115f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //83
            -0.3750f, 2.5000f, -0.4050f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //84
            -0.5000f, 2.5000f, -0.3959f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //85
            -0.6250f, 2.5000f, -0.3843f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //86
            -0.7500f, 2.5000f, -0.3699f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //87
            -0.8750f, 2.5000f, -0.3530f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //88
            -1.0000f, 2.5000f, -0.3333f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //89
            -1.0000f, 2.5000f,  0.0000f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //90
            -1.0000f, 2.5000f,  0.3333f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //91
            -0.8750f, 2.5000f,  0.3530f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //92
            -0.7500f, 2.5000f,  0.3699f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //93
            -0.6250f, 2.5000f,  0.3843f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //94
            -0.5000f, 2.5000f,  0.3959f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //95
            -0.3750f, 2.5000f,  0.4050f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //96
            -0.2500f, 2.5000f,  0.4115f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //97
            -0.1250f, 2.5000f,  0.4154f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //98
             0.0000f, 2.5000f,  0.4167f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //99
             0.1250f, 2.5000f,  0.4154f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //100
             0.2500f, 2.5000f,  0.4115f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //101
             0.3750f, 2.5000f,  0.4050f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //102
             0.5000f, 2.5000f,  0.3959f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //103
             0.6250f, 2.5000f,  0.3843f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //104
             0.7500f, 2.5000f,  0.3699f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //105
             0.8750f, 2.5000f,  0.3530f,    1.1f, 0.0f, 1.1f,                  0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //106
             1.0000f, 2.5000f,  0.3333f,    1.1f, 0.0f, 1.1f,                  1.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //107

            //CrossSection(2.375) - Ver
             0.8125f, 2.375f,  0.0000f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              1.0f, 0.0f, 0.0f,        //108
             0.8125f, 2.375f, -0.2708f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              1.0f, 0.0f, 0.0f,        //109
             0.7109f, 2.375f, -0.2868f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //110
             0.6094f, 2.375f, -0.3006f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //111
             0.5078f, 2.375f, -0.3122f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //112
             0.4063f, 2.375f, -0.3217f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //113
             0.3047f, 2.375f, -0.3291f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //114
             0.2031f, 2.375f, -0.3343f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //115
             0.1016f, 2.375f, -0.3375f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //116
             0.0000f, 2.375f, -0.3385f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //117
            -0.1016f, 2.375f, -0.3375f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //118
            -0.2031f, 2.375f, -0.3343f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //119
            -0.3047f, 2.375f, -0.3291f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //120
            -0.4063f, 2.375f, -0.3217f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //121
            -0.5078f, 2.375f, -0.3122f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //122
            -0.6094f, 2.375f, -0.3006f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //123
            -0.7109f, 2.375f, -0.2868f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, -1.0f,        //124
            -0.8125f, 2.375f, -0.2708f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //125
            -0.8125f, 2.375f,  0.0000f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //126
            -0.8125f, 2.375f,  0.2708f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              -1.0f, 0.0f, 0.0f,        //127
            -0.7109f, 2.375f,  0.2868f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //128
            -0.6094f, 2.375f,  0.3006f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //129
            -0.5078f, 2.375f,  0.3122f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //130
            -0.4063f, 2.375f,  0.3217f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //131
            -0.3047f, 2.375f,  0.3291f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //132
            -0.2031f, 2.375f,  0.3343f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //133
            -0.1016f, 2.375f,  0.3375f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //134
             0.0000f, 2.375f,  0.3385f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //135
             0.1016f, 2.375f,  0.3375f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //136
             0.2031f, 2.375f,  0.3343f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //137
             0.3047f, 2.375f,  0.3291f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //138
             0.4063f, 2.375f,  0.3217f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //139
             0.5078f, 2.375f,  0.3122f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //140
             0.6094f, 2.375f,  0.3006f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //141
             0.7109f, 2.375f,  0.2868f,     0.0f, 0.0f, 1.1f,                  0.0f, 0.0f,              0.0f, 0.0f, 1.0f,        //142
             0.8125f, 2.375f,  0.2708f,     0.0f, 0.0f, 1.1f,                  1.0f, 0.0f,              1.0f, 0.0f, 0.0f        //143
           
    };  //CS499 - Enchancement

    GLfloat verticesNeckCap[] = {                   //CS499 - Enchancement

        //CrossSection(3.1875) - Verified  
            0.8125f, 3.1875f, 0.0000f, 1.0f, 1.0f, 1.0f,          0.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //0
            0.8125f, 3.1875f, -0.2708f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //1
            0.7109f, 3.1875f, -0.2868f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //2
            0.6094f, 3.1875f, -0.3006f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //3
            0.5078f, 3.1875f, -0.3122f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //4
            0.4063f, 3.1875f, -0.3217f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //5
            0.3047f, 3.1875f, -0.3291f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //6
            0.2031f, 3.1875f, -0.3343f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //7
            0.1016f, 3.1875f, -0.3375f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //8
            0.0000f, 3.1875f, -0.3385f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //9
            -0.1016f, 3.1875f, -0.3375f, 1.0f, 1.0f, 1.0f,        0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //10
            -0.2031f, 3.1875f, -0.3343f, 1.0f, 1.0f, 1.0f,        1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //11
            -0.3047f, 3.1875f, -0.3291f, 1.0f, 1.0f, 1.0f,        0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //12
            -0.4063f, 3.1875f, -0.3217f, 1.0f, 1.0f, 1.0f,        1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //13
            -0.5078f, 3.1875f, -0.3122f, 1.0f, 1.0f, 1.0f,        0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //14
            -0.6094f, 3.1875f, -0.3006f, 1.0f, 1.0f, 1.0f,        1.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //15
            -0.7109f, 3.1875f, -0.2868f, 1.0f, 1.0f, 1.0f,        0.0f, 1.0f,              0.0f, 0.0f, -1.0f,        //16
            -0.8125f, 3.1875f, -0.2708f, 1.0f, 1.0f, 1.0f,        1.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //17
            -0.8125f, 3.1875f, 0.0000f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //18
            -0.8125f, 3.1875f, 0.2708f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              -1.0f, 0.0f, 0.0f,        //19
            -0.7109f, 3.1875f, 0.2868f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //20
            -0.6094f, 3.1875f, 0.3006f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //21
            -0.5078f, 3.1875f, 0.3122f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //22
            -0.4063f, 3.1875f, 0.3217f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //23
            -0.3047f, 3.1875f, 0.3291f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //24
            -0.2031f, 3.1875f, 0.3343f, 1.0f, 1.0f, 1.0f,         1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //25
            -0.1016f, 3.1875f, 0.3375f, 1.0f, 1.0f, 1.0f,         0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //26
            0.0000f, 3.1875f, 0.3385f, 1.0f, 1.0f, 1.0f,          1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //27
            0.1016f, 3.1875f, 0.3375f, 1.0f, 1.0f, 1.0f,          0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //28
            0.2031f, 3.1875f, 0.3343f, 1.0f, 1.0f, 1.0f,          1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //29
            0.3047f, 3.1875f, 0.3291f, 1.0f, 1.0f, 1.0f,          0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //30
            0.4063f, 3.1875f, 0.3217f, 1.0f, 1.0f, 1.0f,          1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //31
            0.5078f, 3.1875f, 0.3122f, 1.0f, 1.0f, 1.0f,          0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //32
            0.6094f, 3.1875f, 0.3006f, 1.0f, 1.0f, 1.0f,          1.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //33
            0.7109f, 3.1875f, 0.2868f, 1.0f, 1.0f, 1.0f,          0.0f, 1.0f,              0.0f, 0.0f, 1.0f,        //34
            0.8125f, 3.1875f, 0.2708f, 1.0f, 1.0f, 1.0f,          1.0f, 1.0f,              1.0f, 0.0f, 0.0f,        //35

        //Cross Section Neck(3.5)
            0.2500f, 3.2500f, 0.0000f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //36
            0.2452f, 3.2500f, -0.0488f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //37
            0.2310f, 3.2500f, -0.0957f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //38
            0.2079f, 3.2500f, -0.1389f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //39
            0.1768f, 3.2500f, -0.1768f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //40
            0.1389f, 3.2500f, -0.2079f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //41
            0.0957f, 3.2500f, -0.2310f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //42
            0.0488f, 3.2500f, -0.2452f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //43
            0.0000f, 3.2500f, -0.2500f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //44
            -0.0488f, 3.2500f, -0.2452f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //45
            -0.0957f, 3.2500f, -0.2310f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //46
            -0.1389f, 3.2500f, -0.2079f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //47
            -0.1768f, 3.2500f, -0.1768f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //48
            -0.2079f, 3.2500f, -0.1389f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //49
            -0.2310f, 3.2500f, -0.0957f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //50
            -0.2452f, 3.2500f, -0.0488f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //51
            -0.2500f, 3.2500f, 0.0000f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //52
            -0.2452f, 3.2500f, 0.0488f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //53
            -0.2310f, 3.2500f, 0.0957f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //54
            -0.2079f, 3.2500f, 0.1389f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //55
            -0.1768f, 3.2500f, 0.1768f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //56
            -0.1389f, 3.2500f, 0.2079f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //57
            -0.0957f, 3.2500f, 0.2310f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //58
            -0.0488f, 3.2500f, 0.2452f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //59
            0.0000f, 3.2500f, 0.2500f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //60
            0.0488f, 3.2500f, 0.2452f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //61
            0.0957f, 3.2500f, 0.2310f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //62
            0.1389f, 3.2500f, 0.2079f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //63
            0.1768f, 3.2500f, 0.1768f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  1.0f,        //64
            0.2079f, 3.2500f, 0.1389f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  1.0f,        //65
            0.2310f, 3.2500f, 0.0957f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //66
            0.2452f, 3.2500f, 0.0488f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //67

        //NeckRound(3.313)                        
            0.2488f, 3.3125f, -0.0245f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //68
            0.2392f, 3.3125f, -0.0726f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //69
            0.2205f, 3.3125f, -0.1178f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //70
            0.1933f, 3.3125f, -0.1586f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //71
            0.1586f, 3.3125f, -0.1933f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //72
            0.1178f, 3.3125f, -0.2205f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //73
            0.0726f, 3.3125f, -0.2392f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //74
            0.0245f, 3.3125f, -0.2488f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //75
            -0.0245f, 3.3125f, -0.2488f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //76
            -0.0726f, 3.3125f, -0.2392f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //77
            -0.1178f, 3.3125f, -0.2205f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //78
            -0.1586f, 3.3125f, -0.1933f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //79
            -0.1933f, 3.3125f, -0.1586f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //80
            -0.2205f, 3.3125f, -0.1178f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //81
            -0.2392f, 3.3125f, -0.0726f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //82
            -0.2488f, 3.3125f, -0.0245f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //83
            -0.2488f, 3.3125f, 0.0245f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //84
            -0.2392f, 3.3125f, 0.0726f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //85
            -0.2205f, 3.3125f, 0.1178f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //86
            -0.1933f, 3.3125f, 0.1586f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //87
            -0.1586f, 3.3125f, 0.1933f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //88
            -0.1178f, 3.3125f, 0.2205f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //89
            -0.0726f, 3.3125f, 0.2392f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //90
            -0.0245f, 3.3125f, 0.2488f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //91
            0.0245f, 3.3125f, 0.2488f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //92
            0.0726f, 3.3125f, 0.2392f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //93
            0.1178f, 3.3125f, 0.2205f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //94
            0.1586f, 3.3125f, 0.1933f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //95
            0.1933f, 3.3125f, 0.1586f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  1.0f,        //96
            0.2205f, 3.3125f, 0.1178f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  1.0f,        //97
            0.2392f, 3.3125f, 0.0726f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //98
            0.2488f, 3.3125f, 0.0245f,                   1.0f, 1.0f, 1.0f,                0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //99

        //Cap Base Round(3.313)                       
            0.3125f, 3.3125f, 0.0000f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //100
            0.3065f, 3.3125f, -0.0610f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //101
            0.2888f, 3.3125f, -0.1196f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //102
            0.2598f, 3.3125f, -0.1736f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //103
            0.2210f, 3.3125f, -0.2210f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //104
            0.1736f, 3.3125f, -0.2598f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //105
            0.1196f, 3.3125f, -0.2888f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //106
            0.0610f, 3.3125f, -0.3065f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //107
            0.0000f, 3.3125f, -0.3125f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //108
            -0.0610f, 3.3125f, -0.3065f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //109
            -0.1196f, 3.3125f, -0.2888f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //110
            -0.1736f, 3.3125f, -0.2598f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //111
            -0.2210f, 3.3125f, -0.2210f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //112
            -0.2598f, 3.3125f, -0.1736f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //113
            -0.2888f, 3.3125f, -0.1196f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //114
            -0.3065f, 3.3125f, -0.0610f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //115
            -0.3125f, 3.3125f, 0.0000f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //116
            -0.3065f, 3.3125f, 0.0610f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //117
            -0.2888f, 3.3125f, 0.1196f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //118
            -0.2598f, 3.3125f, 0.1736f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //119
            -0.2210f, 3.3125f, 0.2210f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //120
            -0.1736f, 3.3125f, 0.2598f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //121
            -0.1196f, 3.3125f, 0.2888f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //122
            -0.0610f, 3.3125f, 0.3065f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //123
            0.0000f, 3.3125f, 0.3125f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //124
            0.0610f, 3.3125f, 0.3065f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //125
            0.1196f, 3.3125f, 0.2888f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //126
            0.1736f, 3.3125f, 0.2598f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //127
            0.2210f, 3.3125f, 0.2210f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  1.0f,        //128
            0.2598f, 3.3125f, 0.1736f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  1.0f,        //129
            0.2888f, 3.3125f, 0.1196f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //130
            0.3065f, 3.3125f, 0.0610f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //131

        //Cap Top (4.0)                        
            0.3110f, 4.0000f, -0.0306f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //132
            0.2990f, 4.0000f, -0.0907f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //133
            0.2756f, 4.0000f, -0.1473f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //134
            0.2416f, 4.0000f, -0.1982f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //135
            0.1982f, 4.0000f, -0.2416f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //136
            0.1473f, 4.0000f, -0.2756f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //137
            0.0907f, 4.0000f, -0.2990f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //138
            0.0306f, 4.0000f, -0.3110f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  -1.0f,        //139
            -0.0306f, 4.0000f, -0.3110f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //140
            -0.0907f, 4.0000f, -0.2990f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //141
            -0.1473f, 4.0000f, -0.2756f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //142
            -0.1982f, 4.0000f, -0.2416f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  -1.0f,        //143
            -0.2416f, 4.0000f, -0.1982f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //144
            -0.2756f, 4.0000f, -0.1473f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //145
            -0.2990f, 4.0000f, -0.0907f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //146
            -0.3110f, 4.0000f, -0.0306f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  -1.0f,        //147
            -0.3110f, 4.0000f, 0.0306f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //148
            -0.2990f, 4.0000f, 0.0907f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //149
            -0.2756f, 4.0000f, 0.1473f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //150
            -0.2416f, 4.0000f, 0.1982f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  0.0f,        //151
            -0.1982f, 4.0000f, 0.2416f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //152
            -0.1473f, 4.0000f, 0.2756f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //153
            -0.0907f, 4.0000f, 0.2990f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //154
            -0.0306f, 4.0000f, 0.3110f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              -1.0f, 0.0f,  1.0f,        //155
            0.0306f, 4.0000f, 0.3110f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //156
            0.0907f, 4.0000f, 0.2990f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //157
            0.1473f, 4.0000f, 0.2756f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //158
            0.1982f, 4.0000f, 0.2416f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 0.0f,  1.0f,        //159
            0.2416f, 4.0000f, 0.1982f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  1.0f,        //160
            0.2756f, 4.0000f, 0.1473f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  1.0f,        //161
            0.2990f, 4.0000f, 0.0907f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //162
            0.3110f, 4.0000f, 0.0306f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              1.0f, 0.0f,  0.0f,        //163
            0.0000f, 4.0000f, 0.0000f,                   1.0f, 1.0f, 1.0f,                 0.0f, 0.0f,              0.0f, 1.0f,  0.0f        //164
    };

    

    // Define element indices
    GLubyte bottleBaseIndices[] = {

              1, 2, 35,              //Triangle 1
              35, 34, 2,              //Triangle 2
              2, 3, 34,              //Triangle 3
              34, 33, 3,              //Triangle 4
              3, 4, 33,              //Triangle 5
              33, 32, 4,              //Triangle 6
              4, 5, 32,              //Triangle 7
              32, 31, 5,              //Triangle 8
              5, 6, 31,              //Triangle 9
              31, 30, 6,              //Triangle 10
              6, 7, 30,              //Triangle 11
              30, 29, 7,              //Triangle 12
              7, 8, 29,              //Triangle 13
              29, 28, 8,              //Triangle 14
              8, 9, 28,              //Triangle 15
              28, 27, 9,              //Triangle 16
              9, 10, 27,              //Triangle 17
              27, 26, 10,              //Triangle 18
              10, 11, 26,              //Triangle 19
              26, 25, 11,              //Triangle 20
              11, 12, 25,              //Triangle 21
              25, 24, 12,              //Triangle 22
              12, 13, 24,              //Triangle 23
              24, 23, 13,              //Triangle 24
              13, 14, 23,              //Triangle 25
              23, 22, 14,              //Triangle 26
              14, 15, 22,              //Triangle 27
              22, 21, 15,              //Triangle 28
              15, 16, 21,              //Triangle 29
              21, 20, 16,              //Triangle 30
              16, 17, 20,              //Triangle 31
              20, 19, 17               //Triangle 32

    };

    GLubyte bottleBumpIndices[] = {

        //Chamfer 1                
        0, 71, 37,              //Triangle 33
        37, 0, 1,              //Triangle 34
        1, 37, 38,              //Triangle 35
        38, 1, 2,              //Triangle 36
        2, 38, 39,              //Triangle 37
        39, 2, 3,              //Triangle 38
        3, 39, 40,              //Triangle 39
        40, 3, 4,              //Triangle 40
        4, 40, 41,              //Triangle 41
        41, 4, 5,              //Triangle 42
        5, 41, 42,              //Triangle 43
        42, 5, 6,              //Triangle 44
        6, 42, 43,              //Triangle 45
        43, 6, 7,              //Triangle 46
        7, 43, 44,              //Triangle 47
        44, 7, 8,              //Triangle 48
        8, 44, 45,              //Triangle 49
        45, 8, 9,              //Triangle 50
        45, 9, 10,              //Triangle 51
        10, 45, 46,              //Triangle 52
        46, 10, 11,              //Triangle 53
        11, 46, 47,              //Triangle 54
        47, 11, 12,              //Triangle 55
        12, 47, 48,              //Triangle 56
        48, 12, 13,              //Triangle 57
        13, 48, 49,              //Triangle 58
        49, 13, 14,              //Triangle 59
        14, 49, 50,              //Triangle 60
        50, 14, 15,              //Triangle 61
        15, 50, 51,              //Triangle 62
        51, 15, 16,              //Triangle 63
        16, 51, 52,              //Triangle 64
        52, 16, 17,              //Triangle 65
        17, 52, 53,              //Triangle 66
        53, 17, 18,              //Triangle 67
        18, 53, 55,              //Triangle 68
        55, 18, 19,              //Triangle 69
        19, 55, 56,              //Triangle 70
        56, 19, 20,              //Triangle 71
        20, 56, 57,              //Triangle 72
        57, 20, 21,              //Triangle 73
        21, 57, 58,              //Triangle 74
        58, 21, 22,              //Triangle 75
        22, 58, 59,              //Triangle 76
        59, 22, 23,              //Triangle 77
        23, 59, 60,              //Triangle 78
        60, 23, 24,              //Triangle 79
        24, 60, 61,              //Triangle 80
        61, 24, 25,              //Triangle 81
        25, 61, 62,              //Triangle 82
        62, 25, 26,              //Triangle 83
        26, 62, 63,              //Triangle 84
        63, 26, 27,              //Triangle 85
        63, 27, 28,              //Triangle 86
        28, 63, 64,              //Triangle 87
        64, 28, 29,              //Triangle 88
        29, 64, 65,              //Triangle 89
        65, 29, 30,              //Triangle 90
        30, 65, 66,              //Triangle 91
        66, 30, 31,              //Triangle 92
        31, 66, 67,              //Triangle 93
        67, 31, 32,              //Triangle 94
        32, 67, 68,              //Triangle 95
        68, 32, 33,              //Triangle 96
        33, 68, 69,              //Triangle 97
        69, 33, 34,              //Triangle 98
        34, 69, 70,              //Triangle 99
        70, 34, 35,              //Triangle 100
        35, 70, 71,              //Triangle 101
        71, 35, 0,              //Triangle 102


        //Cross Section                
        71, 73, 37,              //Triangle 103
        37, 38, 73,              //Triangle 104
        73, 74, 38,              //Triangle 105
        38, 39, 74,              //Triangle 106
        74, 75, 39,              //Triangle 107
        39, 40, 75,              //Triangle 108
        75, 76, 40,              //Triangle 109
        40, 41, 76,              //Triangle 110
        76, 77, 41,              //Triangle 111
        41, 42, 77,              //Triangle 112
        77, 78, 42,              //Triangle 113
        42, 43, 78,              //Triangle 114
        78, 79, 43,              //Triangle 115
        43, 44, 79,              //Triangle 116
        79, 80, 44,              //Triangle 117
        44, 45, 80,              //Triangle 118
        80, 81, 45,              //Triangle 119
        45, 46, 81,              //Triangle 120
        81, 82, 46,              //Triangle 121
        46, 47, 82,              //Triangle 122
        82, 83, 47,              //Triangle 123
        47, 48, 83,              //Triangle 124
        83, 84, 48,              //Triangle 125
        48, 49, 84,              //Triangle 126
        84, 85, 49,              //Triangle 127
        49, 50, 85,              //Triangle 128
        85, 86, 50,              //Triangle 129
        50, 51, 86,              //Triangle 130
        86, 87, 51,              //Triangle 131
        51, 52, 87,              //Triangle 132
        87, 88, 52,              //Triangle 133
        52, 53, 88,              //Triangle 134
        88, 89, 53,              //Triangle 135
        53, 55, 89,              //Triangle 136
        89, 91, 55,              //Triangle 137
        55, 56, 91,              //Triangle 138
        91, 92, 56,              //Triangle 139
        56, 57, 92,              //Triangle 140
        92, 93, 57,              //Triangle 141
        57, 58, 93,              //Triangle 142
        93, 94, 58,              //Triangle 143
        58, 59, 94,              //Triangle 144
        94, 95, 59,              //Triangle 145
        59, 60, 95,              //Triangle 146
        95, 96, 60,              //Triangle 147
        60, 61, 96,              //Triangle 148
        96, 97, 61,              //Triangle 149
        61, 62, 97,              //Triangle 150
        97, 98, 62,              //Triangle 151
        62, 63, 98,              //Triangle 152
        98, 99, 63,              //Triangle 153
        63, 64, 99,              //Triangle 154
        99, 100, 64,              //Triangle 155
        64, 65, 100,              //Triangle 156
        100, 101, 65,              //Triangle 157
        65, 66, 101,              //Triangle 158
        101, 102, 66,              //Triangle 159
        66, 67, 102,              //Triangle 160
        102, 103, 67,              //Triangle 161
        67, 68, 103,              //Triangle 162
        103, 104, 68,              //Triangle 163
        68, 69, 104,              //Triangle 164
        104, 105, 69,              //Triangle 165
        69, 70, 105,              //Triangle 166
        105, 106, 70,              //Triangle 167
        70, 71, 106,              //Triangle 168
        106, 107, 71,              //Triangle 169
        71, 73, 107,              //Triangle 170


        //Chamfer 2               
        108, 107, 73,              //Triangle 171
        73, 108, 109,              //Triangle 172
        109, 73, 74,              //Triangle 173
        74, 109, 110,              //Triangle 174
        110, 74, 75,              //Triangle 175
        75, 110, 111,              //Triangle 176
        111, 75, 76,              //Triangle 177
        76, 111, 112,              //Triangle 178
        112, 76, 77,              //Triangle 179
        77, 112, 113,              //Triangle 180
        113, 77, 78,              //Triangle 181
        78, 113, 114,              //Triangle 182
        114, 78, 79,              //Triangle 183
        79, 114, 115,              //Triangle 184
        115, 79, 80,              //Triangle 185
        80, 115, 116,              //Triangle 186
        116, 80, 81,              //Triangle 187
        81, 116, 117,              //Triangle 188
        81, 117, 118,              //Triangle 189
        118, 81, 82,              //Triangle 190
        82, 118, 119,              //Triangle 191
        119, 82, 83,              //Triangle 192
        83, 119, 120,              //Triangle 193
        120, 83, 84,              //Triangle 194
        84, 120, 121,              //Triangle 195
        121, 84, 85,              //Triangle 196
        85, 121, 122,              //Triangle 197
        122, 85, 86,              //Triangle 198
        86, 122, 123,              //Triangle 199
        123, 86, 87,              //Triangle 200
        87, 123, 124,              //Triangle 201
        124, 87, 88,              //Triangle 202
        88, 124, 125,              //Triangle 203
        125, 88, 89,              //Triangle 204
        89, 125, 126,              //Triangle 205
        126, 89, 91,              //Triangle 206
        91, 126, 127,              //Triangle 207
        127, 91, 92,              //Triangle 208
        92, 127, 128,              //Triangle 209
        128, 92, 93,              //Triangle 210
        93, 128, 129,              //Triangle 211
        129, 93, 94,              //Triangle 212
        94, 129, 130,              //Triangle 213
        130, 94, 95,              //Triangle 214
        95, 130, 131,              //Triangle 215
        131, 95, 96,              //Triangle 216
        96, 131, 132,              //Triangle 217
        132, 96, 97,              //Triangle 218
        97, 132, 133,              //Triangle 219
        133, 97, 98,              //Triangle 220
        98, 133, 134,              //Triangle 221
        134, 98, 99,              //Triangle 222
        99, 134, 135,              //Triangle 223
        99, 135, 136,              //Triangle 224
        136, 99, 100,              //Triangle 225
        100, 136, 137,              //Triangle 226
        137, 100, 101,              //Triangle 227
        101, 137, 138,              //Triangle 228
        138, 101, 102,              //Triangle 229
        102, 138, 139,              //Triangle 230
        139, 102, 103,              //Triangle 231
        103, 139, 140,              //Triangle 232
        140, 103, 104,              //Triangle 233
        104, 140, 141,              //Triangle 234
        141, 104, 105,              //Triangle 235
        105, 141, 142,              //Triangle 236
        142, 105, 106,              //Triangle 237
        106, 142, 143,              //Triangle 238
        143, 106, 107,              //Triangle 239
        107, 143, 108               //Triangle 240
    };

    GLubyte bottleMidIndices[] = {
              //Bottle Mid
              35, 37, 1,              //Triangle 241
              1, 2, 37,              //Triangle 242
              37, 38, 2,              //Triangle 243
              2, 3, 38,              //Triangle 244
              38, 39, 3,              //Triangle 245
              3, 4, 39,              //Triangle 246
              39, 40, 4,              //Triangle 247
              4, 5, 40,              //Triangle 248
              40, 41, 5,              //Triangle 249
              5, 6, 41,              //Triangle 250
              41, 42, 6,              //Triangle 251
              6, 7, 42,              //Triangle 252
              42, 43, 7,              //Triangle 253
              7, 8, 43,              //Triangle 254
              43, 44, 8,              //Triangle 255
              8, 9, 44,              //Triangle 256
              44, 45, 9,              //Triangle 257
              9, 10, 45,              //Triangle 258
              45, 46, 10,              //Triangle 259
              10, 11, 46,              //Triangle 260
              46, 47, 11,              //Triangle 261
              11, 12, 47,              //Triangle 262
              47, 48, 12,              //Triangle 263
              12, 13, 48,              //Triangle 264
              48, 49, 13,              //Triangle 265
              13, 14, 49,              //Triangle 266
              49, 50, 14,              //Triangle 267
              14, 15, 50,              //Triangle 268
              50, 51, 15,              //Triangle 269
              15, 16, 51,              //Triangle 270
              51, 52, 16,              //Triangle 271
              16, 17, 52,              //Triangle 272
              52, 53, 17,              //Triangle 273
              17, 19, 53,              //Triangle 274
              53, 55, 19,              //Triangle 275
              19, 20, 55,              //Triangle 276
              55, 56, 20,              //Triangle 277
              20, 21, 56,              //Triangle 278
              56, 57, 21,              //Triangle 279
              21, 22, 57,              //Triangle 280
              57, 58, 22,              //Triangle 281
              22, 23, 58,              //Triangle 282
              58, 59, 23,              //Triangle 283
              23, 24, 59,              //Triangle 284
              59, 60, 24,              //Triangle 285
              24, 25, 60,              //Triangle 286
              60, 61, 25,              //Triangle 287
              25, 26, 61,              //Triangle 288
              61, 62, 26,              //Triangle 289
              26, 27, 62,              //Triangle 290
              62, 63, 27,              //Triangle 291
              27, 28, 63,              //Triangle 292
              63, 64, 28,              //Triangle 293
              28, 29, 64,              //Triangle 294
              64, 65, 29,              //Triangle 295
              29, 30, 65,              //Triangle 296
              65, 66, 30,              //Triangle 297
              30, 31, 66,              //Triangle 298
              66, 67, 31,              //Triangle 299
              31, 32, 67,              //Triangle 300
              67, 68, 32,              //Triangle 301
              32, 33, 68,              //Triangle 302
              68, 69, 33,              //Triangle 303
              33, 34, 69,              //Triangle 304
              69, 70, 34,              //Triangle 305
              34, 35, 70,              //Triangle 306
              70, 71, 35,              //Triangle 307
              35, 37, 71               //Triangle 308
    };

    GLubyte bottleNeckIndices[] = {
        //CrossSection(3.1875) Chamfer to BaseRound(3.25) 
                      36, 35, 1,              //Triangle200
                      1, 36, 37,              //Triangle201
                      37, 1, 2,              //Triangle202
                      2, 37, 38,              //Triangle203
                      38, 2, 3,              //Triangle204
                      3, 38, 39,              //Triangle205
                      39, 3, 4,              //Triangle206
                      4, 39, 40,              //Triangle207
                      40, 4, 5,              //Triangle208
                      5, 40, 41,              //Triangle209
                      41, 5, 6,              //Triangle210
                      6, 41, 42,              //Triangle211
                      42, 6, 7,              //Triangle212
                      7, 42, 43,              //Triangle213
                      43, 7, 8,              //Triangle214
                      8, 43, 44,              //Triangle215
                      44, 8, 9,              //Triangle216
                      44, 9, 10,              //Triangle217
                      10, 44, 45,              //Triangle218
                      45, 10, 11,              //Triangle219
                      11, 45, 46,              //Triangle220
                      46, 11, 12,              //Triangle221
                      12, 46, 47,              //Triangle222
                      47, 12, 13,              //Triangle223
                      13, 47, 48,              //Triangle224
                      48, 13, 14,              //Triangle225
                      14, 48, 49,              //Triangle226
                      49, 14, 15,              //Triangle227
                      15, 49, 50,              //Triangle228
                      50, 15, 16,              //Triangle229
                      16, 50, 51,              //Triangle230
                      51, 16, 17,              //Triangle231
                      17, 51, 52,              //Triangle232
                      52, 17, 19,              //Triangle233
                      19, 52, 53,              //Triangle234
                      53, 19, 20,              //Triangle235
                      20, 53, 54,              //Triangle236
                      54, 20, 21,              //Triangle237
                      21, 54, 55,              //Triangle238
                      55, 21, 22,              //Triangle239
                      22, 55, 56,              //Triangle240
                      56, 22, 23,              //Triangle241
                      23, 56, 57,              //Triangle242
                      57, 23, 24,              //Triangle243
                      24, 57, 58,              //Triangle244
                      58, 24, 25,              //Triangle245
                      25, 58, 59,              //Triangle246
                      59, 25, 26,              //Triangle247
                      26, 59, 60,              //Triangle248
                      60, 26, 27,              //Triangle249
                      60, 27, 28,              //Triangle250
                      28, 60, 61,              //Triangle251
                      61, 28, 29,              //Triangle252
                      29, 61, 62,              //Triangle253
                      62, 29, 30,              //Triangle254
                      30, 62, 63,              //Triangle255
                      63, 30, 31,              //Triangle256
                      31, 63, 64,              //Triangle257
                      64, 31, 32,              //Triangle258
                      32, 64, 65,              //Triangle259
                      65, 32, 33,              //Triangle260
                      33, 65, 66,              //Triangle261
                      66, 33, 34,              //Triangle262
                      34, 66, 67,              //Triangle263
                      67, 34, 35,              //Triangle264
                      35, 67, 36,              //Triangle265

        //BaseRound(3.25)  to NeckRound(3.313) 
                      36, 68, 37,              //Triangle266
                      68, 37, 69,              //Triangle267
                      37, 69, 38,              //Triangle268
                      69, 38, 70,              //Triangle269
                      38, 70, 39,              //Triangle270
                      70, 39, 71,              //Triangle271
                      39, 71, 40,              //Triangle272
                      71, 40, 72,              //Triangle273
                      40, 72, 41,              //Triangle274
                      72, 41, 73,              //Triangle275
                      41, 73, 42,              //Triangle276
                      73, 42, 74,              //Triangle277
                      42, 74, 43,              //Triangle278
                      74, 43, 75,              //Triangle279
                      43, 75, 44,              //Triangle280
                      75, 44, 76,              //Triangle281
                      44, 76, 45,              //Triangle282
                      76, 45, 77,              //Triangle283
                      45, 77, 46,              //Triangle284
                      77, 46, 78,              //Triangle285
                      46, 78, 47,              //Triangle286
                      78, 47, 79,              //Triangle287
                      47, 79, 48,              //Triangle288
                      79, 48, 80,              //Triangle289
                      48, 80, 49,              //Triangle290
                      80, 49, 81,              //Triangle291
                      49, 81, 50,              //Triangle292
                      81, 50, 82,              //Triangle293
                      50, 82, 51,              //Triangle294
                      82, 51, 83,              //Triangle295
                      51, 83, 52,              //Triangle296
                      83, 52, 84,              //Triangle297
                      52, 84, 53,              //Triangle298
                      84, 53, 85,              //Triangle299
                      53, 85, 54,              //Triangle300
                      85, 54, 86,              //Triangle301
                      54, 86, 55,              //Triangle302
                      86, 55, 87,              //Triangle303
                      55, 87, 56,              //Triangle304
                      87, 56, 88,              //Triangle305
                      56, 88, 57,              //Triangle306
                      88, 57, 89,              //Triangle307
                      57, 89, 58,              //Triangle308
                      89, 58, 90,              //Triangle309
                      58, 90, 59,              //Triangle310
                      90, 59, 91,              //Triangle311
                      59, 91, 60,              //Triangle312
                      91, 60, 92,              //Triangle313
                      60, 92, 61,              //Triangle314
                      92, 61, 93,              //Triangle315
                      61, 93, 62,              //Triangle316
                      93, 62, 94,              //Triangle317
                      62, 94, 63,              //Triangle318
                      94, 63, 95,              //Triangle319
                      63, 95, 64,              //Triangle320
                      95, 64, 96,              //Triangle321
                      64, 96, 65,              //Triangle322
                      96, 65, 97,              //Triangle323
                      65, 97, 66,              //Triangle324
                      97, 66, 98,              //Triangle325
                      66, 98, 67,              //Triangle326
                      98, 67, 99,              //Triangle327
                      67, 99, 36,              //Triangle328
                      99, 36, 68               //Triangle329
    };

    GLubyte capIndices[] = {
        //NeckRound(3.313)   to Cap BaseRound(3.313) 
                      100, 68, 101,              //Triangle330
                      68, 101, 69,              //Triangle331
                      101, 69, 102,              //Triangle332
                      69, 102, 70,              //Triangle333
                      102, 70, 103,              //Triangle334
                      70, 103, 71,              //Triangle335
                      103, 71, 104,              //Triangle336
                      71, 104, 72,              //Triangle337
                      104, 72, 105,              //Triangle338
                      72, 105, 73,              //Triangle339
                      105, 73, 106,              //Triangle340
                      73, 106, 74,              //Triangle341
                      106, 74, 107,              //Triangle342
                      74, 107, 75,              //Triangle343
                      107, 75, 108,              //Triangle344
                      75, 108, 76,              //Triangle345
                      108, 76, 109,              //Triangle346
                      76, 109, 77,              //Triangle347
                      109, 77, 110,              //Triangle348
                      77, 110, 78,              //Triangle349
                      110, 78, 111,              //Triangle350
                      78, 111, 79,              //Triangle351
                      111, 79, 112,              //Triangle352
                      79, 112, 80,              //Triangle353
                      112, 80, 113,              //Triangle354
                      80, 113, 81,              //Triangle355
                      113, 81, 114,              //Triangle356
                      81, 114, 82,              //Triangle357
                      114, 82, 115,              //Triangle358
                      82, 115, 83,              //Triangle359
                      115, 83, 116,              //Triangle360
                      83, 116, 84,              //Triangle361
                      116, 84, 117,              //Triangle362
                      84, 117, 85,              //Triangle363
                      117, 85, 118,              //Triangle364
                      85, 118, 86,              //Triangle365
                      118, 86, 119,              //Triangle366
                      86, 119, 87,              //Triangle367
                      119, 87, 120,              //Triangle368
                      87, 120, 88,              //Triangle369
                      120, 88, 121,              //Triangle370
                      88, 121, 89,              //Triangle371
                      121, 89, 122,              //Triangle372
                      89, 122, 90,              //Triangle373
                      122, 90, 123,              //Triangle374
                      90, 123, 91,              //Triangle375
                      123, 91, 124,              //Triangle376
                      91, 124, 92,              //Triangle377
                      124, 92, 125,              //Triangle378
                      92, 125, 93,              //Triangle379
                      125, 93, 126,              //Triangle380
                      93, 126, 94,              //Triangle381
                      126, 94, 127,              //Triangle382
                      94, 127, 95,              //Triangle383
                      127, 95, 128,              //Triangle384
                      95, 128, 96,              //Triangle385
                      128, 96, 129,              //Triangle386
                      96, 129, 97,              //Triangle387
                      129, 97, 130,              //Triangle388
                      97, 130, 98,              //Triangle389
                      130, 98, 131,              //Triangle390
                      98, 131, 99,              //Triangle391
                      131, 99, 100,              //Triangle392
                      99, 100, 68,              //Triangle393

        //Cap Base Round(3.313)   to Cap Top(4.0) 
                      100, 132, 101,              //Triangle394
                      132, 101, 133,              //Triangle395
                      101, 133, 102,              //Triangle396
                      133, 102, 134,              //Triangle397
                      102, 134, 103,              //Triangle398
                      134, 103, 135,              //Triangle399
                      103, 135, 104,              //Triangle400
                      135, 104, 136,              //Triangle401
                      104, 136, 105,              //Triangle402
                      136, 105, 137,              //Triangle403
                      105, 137, 106,              //Triangle404
                      137, 106, 138,              //Triangle405
                      106, 138, 107,              //Triangle406
                      138, 107, 139,              //Triangle407
                      107, 139, 108,              //Triangle408
                      139, 108, 140,              //Triangle409
                      108, 140, 109,              //Triangle410
                      140, 109, 141,              //Triangle411
                      109, 141, 110,              //Triangle412
                      141, 110, 142,              //Triangle413
                      110, 142, 111,              //Triangle414
                      142, 111, 143,              //Triangle415
                      111, 143, 112,              //Triangle416
                      143, 112, 144,              //Triangle417
                      112, 144, 113,              //Triangle418
                      144, 113, 145,              //Triangle419
                      113, 145, 114,              //Triangle420
                      145, 114, 146,              //Triangle421
                      114, 146, 115,              //Triangle422
                      146, 115, 147,              //Triangle423
                      115, 147, 116,              //Triangle424
                      147, 116, 148,              //Triangle425
                      116, 148, 117,              //Triangle426
                      148, 117, 149,              //Triangle427
                      117, 149, 118,              //Triangle428
                      149, 118, 150,              //Triangle429
                      118, 150, 119,              //Triangle430
                      150, 119, 151,              //Triangle431
                      119, 151, 120,              //Triangle432
                      151, 120, 152,              //Triangle433
                      120, 152, 121,              //Triangle434
                      152, 121, 153,              //Triangle435
                      121, 153, 122,              //Triangle436
                      153, 122, 154,              //Triangle437
                      122, 154, 123,              //Triangle438
                      154, 123, 155,              //Triangle439
                      123, 155, 124,              //Triangle440
                      155, 124, 156,              //Triangle441
                      124, 156, 125,              //Triangle442
                      156, 125, 157,              //Triangle443
                      125, 157, 126,              //Triangle444
                      157, 126, 158,              //Triangle445
                      126, 158, 127,              //Triangle446
                      158, 127, 159,              //Triangle447
                      127, 159, 128,              //Triangle448
                      159, 128, 160,              //Triangle449
                      128, 160, 129,              //Triangle450
                      160, 129, 161,              //Triangle451
                      129, 161, 130,              //Triangle452
                      161, 130, 162,              //Triangle453
                      130, 162, 131,              //Triangle454
                      162, 131, 163,              //Triangle455
                      131, 163, 100,              //Triangle456
                      163, 100, 132,              //Triangle457

        //Cap Top (4.0) 
                      164, 132, 133,              //Triangle458
                      164, 133, 134,              //Triangle459
                      164, 134, 135,              //Triangle460
                      164, 135, 136,              //Triangle461
                      164, 136, 137,              //Triangle462
                      164, 137, 138,              //Triangle463
                      164, 138, 139,              //Triangle464
                      164, 139, 140,              //Triangle465
                      164, 140, 141,              //Triangle466
                      164, 141, 142,              //Triangle467
                      164, 142, 143,              //Triangle468
                      164, 143, 144,              //Triangle469
                      164, 144, 145,              //Triangle470
                      164, 145, 146,              //Triangle471
                      164, 146, 147,              //Triangle472
                      164, 147, 148,              //Triangle473
                      164, 148, 149,              //Triangle474
                      164, 149, 150,              //Triangle475
                      164, 150, 151,              //Triangle476
                      164, 151, 152,              //Triangle477
                      164, 152, 153,              //Triangle478
                      164, 153, 154,              //Triangle479
                      164, 154, 155,              //Triangle480
                      164, 155, 156,              //Triangle481
                      164, 156, 157,              //Triangle482
                      164, 157, 158,              //Triangle483
                      164, 158, 159,              //Triangle484
                      164, 159, 160,              //Triangle485
                      164, 160, 161,              //Triangle486
                      164, 161, 162,              //Triangle487
                      164, 162, 163,              //Triangle488
                      164, 163, 132,              //Triangle489
    };

    // Plane Transforms
    glm::vec3 planePositions[] = {
        glm::vec3(0.0f,  0.0f,  0.5f),
        glm::vec3(0.5f,  0.0f,  0.0f),
        glm::vec3(0.0f,  0.0f, -0.5f),
        glm::vec3(-0.5f,  0.0f,  0.0f),
        glm::vec3(0.0f,  0.5f,  0.0f),
        glm::vec3(0.0f, -0.5f,  0.0f)
    };

    glm::float32 planeRotations[] = {
        0.0f, 90.0f, 180.0f, -90.0f,-90.f, 90.f
    };
    glm::float32 planeRotationsX[] =
    {
       -30.0f, -30.0f, -30.0f, -30.0f
    };

    glEnable(GL_DEPTH_TEST);

    //initializeGLEW
    if (glewInit() != GLEW_OK)
        cout << "Error!" << endl;

    //BizCreateBuffers();  *********************************************************************************************************************************************
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

    /* Loop until the user closes the window ***  */  
    while (!glfwWindowShouldClose(window))
    {

        //Set Delta Time - Week 5
        GLfloat currentFrame = glfwGetTime();
        deltaTime = lastFrame - currentFrame;
        lastFrame = currentFrame;

        GLuint bottleBasVBO,  bottleBasEBO,  bottleBasVAO,  //CS499 Enhancement
               bottleBotVBO,  bottleBotEBO,  bottleBotVAO,  //CS499 Enhancement
               bottleMidVBO,  bottleMidEBO,  bottleMidVAO,  //CS499 Enhancement
               bottleTopVBO,  bottleTopEBO,  bottleTopVAO,  //CS499 Enhancement
              bottleNeckVBO, bottleNeckEBO, bottleNeckVAO,  //CS499 Enhancement
                     capVBO,        capEBO,        capVAO,
              frontLabelVBO, frontLabelEBO, frontLabelVAO, 
               rearLabelVBO,  rearLabelEBO,  rearLabelVAO, 
                    lampVBO,       lampEBO,       lampVAO;

        glGenBuffers(1, &bottleBasVBO);  //create VBO   //CS499 Enhancement
        glGenBuffers(1, &bottleBasEBO);  //creates VBO  //CS499 Enhancement

        glGenBuffers(1, &bottleBotVBO);  //create VBO   //CS499 Enhancement
        glGenBuffers(1, &bottleBotEBO);  //creates VBO  //CS499 Enhancement

        glGenBuffers(1, &bottleMidVBO);  //create VBO   //CS499 Enhancement
        glGenBuffers(1, &bottleMidEBO);  //creates VBO  //CS499 Enhancement

        glGenBuffers(1, &bottleTopVBO);  //create VBO   //CS499 Enhancement
        glGenBuffers(1, &bottleTopEBO);  //creates VBO  //CS499 Enhancement

        glGenBuffers(1, &bottleNeckVBO);  //create VBO   //CS499 Enhancement
        glGenBuffers(1, &bottleNeckEBO);  //creates VBO  //CS499 Enhancement

        glGenBuffers(1, &capVBO);  //create VBO
        glGenBuffers(1, &capEBO);  //creates VBO

        glGenBuffers(1, &frontLabelVBO);  //create VBO
        glGenBuffers(1, &frontLabelEBO);  //creates VBO

        glGenBuffers(1, &rearLabelVBO);  //create VBO
        glGenBuffers(1, &rearLabelEBO);  //creates VBO

        glGenBuffers(1, &lampVBO); // Create VBO
        glGenBuffers(1, &lampEBO); // Create EBO

        glGenVertexArrays(1, &bottleBasVAO); // Create Vertex Array Object  //CS499 Enhancement
        glGenVertexArrays(1, &bottleBotVAO); // Create Vertex Array Object  //CS499 Enhancement
        glGenVertexArrays(1, &bottleMidVAO); // Create Vertex Array Object  //CS499 Enhancement
        glGenVertexArrays(1, &bottleTopVAO); // Create Vertex Array Object  //CS499 Enhancement
        glGenVertexArrays(1, &bottleNeckVAO); // Create Vertex Array Object  //CS499 Enhancement
        glGenVertexArrays(1, &capVAO); // Create Vertex Array Object
        glGenVertexArrays(1, &frontLabelVAO); // Create Vertex Array Object
        glGenVertexArrays(1, &rearLabelVAO); // Create Vertex Array Object
        glGenVertexArrays(1, &lampVAO); // Create VOA

        glBindVertexArray(bottleBasVAO);   //CS499 Enhancement

            glBindBuffer(GL_ARRAY_BUFFER, bottleBasVBO);    //activates the buffer
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bottleBasEBO); // Select EBO
            glBufferData(GL_ARRAY_BUFFER, sizeof(verticesBot), verticesBot, GL_STATIC_DRAW);       //Load Vertex buffer   
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(bottleBaseIndices), bottleBaseIndices, GL_STATIC_DRAW); //Load indices 

            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)0);   //Creates the vertex attribute pointer
            glEnableVertexAttribArray(0);				//Specifies the initial position of the coordinates in the buffer

            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
            glEnableVertexAttribArray(1);				//Specifies position 1 for the color values in the buffer

            glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(6 * sizeof(GLfloat)));
            glEnableVertexAttribArray(2);

            glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(8 * sizeof(GLfloat)));
            glEnableVertexAttribArray(3);

        glBindVertexArray(0);

        glBindVertexArray(bottleBotVAO);   //CS499 Enhancement

            glBindBuffer(GL_ARRAY_BUFFER, bottleBotVBO);    //activates the buffer
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bottleBotEBO); // Select EBO
            glBufferData(GL_ARRAY_BUFFER, sizeof(verticesBot), verticesBot, GL_STATIC_DRAW);       //Load Vertex buffer   
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(bottleBumpIndices), bottleBumpIndices, GL_STATIC_DRAW); //Load indices 

            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)0);   //Creates the vertex attribute pointer
            glEnableVertexAttribArray(0);				//Specifies the initial position of the coordinates in the buffer

            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
            glEnableVertexAttribArray(1);				//Specifies position 1 for the color values in the buffer

            glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(6 * sizeof(GLfloat)));
            glEnableVertexAttribArray(2);

            glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(8 * sizeof(GLfloat)));
            glEnableVertexAttribArray(3);

        glBindVertexArray(0);  

        glBindVertexArray(bottleMidVAO);   //CS499 Enhancement

            glBindBuffer(GL_ARRAY_BUFFER, bottleMidVBO);    //activates the buffer
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bottleMidEBO); // Select EBO
            glBufferData(GL_ARRAY_BUFFER, sizeof(verticesMid), verticesMid, GL_STATIC_DRAW);       //Load Vertex buffer   
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(bottleMidIndices), bottleMidIndices, GL_STATIC_DRAW); //Load indices 

            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)0);   //Creates the vertex attribute pointer
            glEnableVertexAttribArray(0);				//Specifies the initial position of the coordinates in the buffer

            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
            glEnableVertexAttribArray(1);				//Specifies position 1 for the color values in the buffer

            glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(6 * sizeof(GLfloat)));
            glEnableVertexAttribArray(2);

            glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(8 * sizeof(GLfloat)));
            glEnableVertexAttribArray(3);

        glBindVertexArray(0);

        glBindVertexArray(bottleTopVAO);   //CS499 Enhancement

            glBindBuffer(GL_ARRAY_BUFFER, bottleTopVBO);    //activates the buffer
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bottleTopEBO); // Select EBO
            glBufferData(GL_ARRAY_BUFFER, sizeof(verticesTop), verticesTop, GL_STATIC_DRAW);       //Load Vertex buffer   
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(bottleBumpIndices), bottleBumpIndices, GL_STATIC_DRAW); //Load indices 

            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)0);   //Creates the vertex attribute pointer
            glEnableVertexAttribArray(0);				//Specifies the initial position of the coordinates in the buffer

            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
            glEnableVertexAttribArray(1);				//Specifies position 1 for the color values in the buffer

            glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(6 * sizeof(GLfloat)));
            glEnableVertexAttribArray(2);

            glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(8 * sizeof(GLfloat)));
            glEnableVertexAttribArray(3);

        glBindVertexArray(0);

        glBindVertexArray(bottleNeckVAO);   //CS499 Enhancement

            glBindBuffer(GL_ARRAY_BUFFER, bottleNeckVBO);    //activates the buffer
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bottleNeckEBO); // Select EBO
            glBufferData(GL_ARRAY_BUFFER, sizeof(verticesNeckCap), verticesNeckCap, GL_STATIC_DRAW);       //Load Vertex buffer   
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(bottleNeckIndices), bottleNeckIndices, GL_STATIC_DRAW); //Load indices 

            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)0);   //Creates the vertex attribute pointer
            glEnableVertexAttribArray(0);				//Specifies the initial position of the coordinates in the buffer

            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
            glEnableVertexAttribArray(1);				//Specifies position 1 for the color values in the buffer

            glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(6 * sizeof(GLfloat)));
            glEnableVertexAttribArray(2);

            glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(8 * sizeof(GLfloat)));
            glEnableVertexAttribArray(3);

        glBindVertexArray(0);


        glBindVertexArray(capVAO);

            glBindBuffer(GL_ARRAY_BUFFER, capVBO);    //activates the buffer
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, capEBO); // Select EBO
            glBufferData(GL_ARRAY_BUFFER, sizeof(verticesNeckCap), verticesNeckCap, GL_STATIC_DRAW);       //Load Vertex buffer   
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(capIndices), capIndices, GL_STATIC_DRAW); //Load indices 

            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)0);   //Creates the vertex attribute pointer
            glEnableVertexAttribArray(0);				//Specifies the initial position of the coordinates in the buffer

            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
            glEnableVertexAttribArray(1);				//Specifies position 1 for the color values in the buffer

            glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(6 * sizeof(GLfloat)));
            glEnableVertexAttribArray(2);

            glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(8 * sizeof(GLfloat)));
            glEnableVertexAttribArray(3);

        glBindVertexArray(0);

        glBindVertexArray(frontLabelVAO);

            glBindBuffer(GL_ARRAY_BUFFER, frontLabelVBO);    //activates the buffer
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, frontLabelEBO); // Select EBO
            glBufferData(GL_ARRAY_BUFFER, sizeof(labelVertices), labelVertices, GL_STATIC_DRAW);       //Load Vertex buffer   
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(frontLabelIndices), frontLabelIndices, GL_STATIC_DRAW); //Load indices 

            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)0);   //Creates the vertex attribute pointer
            glEnableVertexAttribArray(0);				//Specifies the initial position of the coordinates in the buffer

            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
            glEnableVertexAttribArray(1);				//Specifies position 1 for the color values in the buffer

            glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(6 * sizeof(GLfloat)));
            glEnableVertexAttribArray(2);

            glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(8 * sizeof(GLfloat)));
            glEnableVertexAttribArray(3);

        glBindVertexArray(0);

        glBindVertexArray(rearLabelVAO);

            glBindBuffer(GL_ARRAY_BUFFER, rearLabelVBO);    //activates the buffer
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, rearLabelEBO); // Select EBO
            glBufferData(GL_ARRAY_BUFFER, sizeof(labelVertices), labelVertices, GL_STATIC_DRAW);       //Load Vertex buffer   
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(rearLabelIndices), rearLabelIndices, GL_STATIC_DRAW); //Load indices 
            
            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)0);   //Creates the vertex attribute pointer
            glEnableVertexAttribArray(0);				//Specifies the initial position of the coordinates in the buffer

            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
            glEnableVertexAttribArray(1);				//Specifies position 1 for the color values in the buffer

            glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(6 * sizeof(GLfloat)));
            glEnableVertexAttribArray(2);

            glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(GLfloat), (GLvoid*)(8 * sizeof(GLfloat)));
            glEnableVertexAttribArray(3);

        glBindVertexArray(0);

        glBindVertexArray(lampVAO);

            glBindBuffer(GL_ARRAY_BUFFER, lampVBO); // Select VBO
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, lampEBO); // Select EBO

            glBufferData(GL_ARRAY_BUFFER, sizeof(lampVertices), lampVertices, GL_STATIC_DRAW); // Load vertex attributes
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(lampIndices), lampIndices, GL_STATIC_DRAW); // Load indices 

            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0 * sizeof(GLfloat), (GLvoid*)0);
            glEnableVertexAttribArray(0);

        glBindVertexArray(0);


        //Load textures **
        int frontLabelWidth, frontLabelHeight, rearLabelWidth, rearLabelHeight, wpWidth, wpHeight, bcWidth, bcHeight;
        unsigned char* frontLabelImage = SOIL_load_image("ListerineMainFront.jpg", &frontLabelWidth, &frontLabelHeight, 0, SOIL_LOAD_RGB);
        unsigned char* rearLabelImage = SOIL_load_image("ListerineMainBack.jpg", &rearLabelWidth, &rearLabelHeight, 0, SOIL_LOAD_RGB);
        unsigned char* wpLabelImage = SOIL_load_image("WhitePlastic.jpg", &wpWidth, &wpHeight, 0, SOIL_LOAD_RGB);
        unsigned char* bcLabelImage = SOIL_load_image("BlackCap.jpg", &bcWidth, &bcHeight, 0, SOIL_LOAD_RGB);


        //Generate textures
        GLuint frontLabelTexture;                                                                                                           // for texture ID
        glGenTextures(1, &frontLabelTexture);                                                                                               // Generate texture id
        glBindTexture(GL_TEXTURE_2D, frontLabelTexture);                                                                                    // Activate texture
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, frontLabelWidth, frontLabelHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, frontLabelImage);            // Generate texture
        glGenerateMipmap(GL_TEXTURE_2D);                                                                                                    // Texture resolution managment
        SOIL_free_image_data(frontLabelImage);                                                                                              // Free imge from memory
        glBindTexture(GL_TEXTURE_2D, 0);                                                                                                    // Unbind or close texture object                                                                         

        GLuint rearLabelTexture;
        glGenTextures(1, &rearLabelTexture);
        glBindTexture(GL_TEXTURE_2D, rearLabelTexture);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, rearLabelWidth, rearLabelHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, rearLabelImage);
        glGenerateMipmap(GL_TEXTURE_2D);
        SOIL_free_image_data(rearLabelImage);
        glBindTexture(GL_TEXTURE_2D, 0);

        GLuint wpTexture;
        glGenTextures(1, &wpTexture);
        glBindTexture(GL_TEXTURE_2D, wpTexture);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, wpWidth, wpHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, wpLabelImage);
        glGenerateMipmap(GL_TEXTURE_2D);
        SOIL_free_image_data(wpLabelImage);
        glBindTexture(GL_TEXTURE_2D, 0);

        GLuint bcTexture;
        glGenTextures(1, &bcTexture);
        glBindTexture(GL_TEXTURE_2D, bcTexture);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, bcWidth, bcHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, bcLabelImage);
        glGenerateMipmap(GL_TEXTURE_2D);
        SOIL_free_image_data(bcLabelImage);
        glBindTexture(GL_TEXTURE_2D, 0);

        //vertex Shader Source Code **
        string vertexShaderSource =
            "#version 330 core\n"
            "layout(location = 0) in vec3 vPosition;"
            "layout(location = 1) in vec3 aColor;"
            "layout(location = 2) in vec2 texCoord;"
            "layout(location = 3) in vec3 normal;"
            "out vec3 oColor;"
            "out vec2 oTexCoord;"
            "out vec3 oNormal;"
            "out vec3 FragPos;"
            "uniform mat4 model;"
            "uniform mat4 view;"
            "uniform mat4 projection;"
            "void main()\n"
            "{\n"
            "gl_Position = projection * view * model * vec4(vPosition.x, vPosition.y, vPosition.z, 1.0);"
            "oColor = aColor;"
            "oTexCoord = texCoord;"
            "oNormal = mat3(transpose(inverse(model))) * normal;"
            "FragPos = vec3(model * vec4(vPosition, 1.0f));"
            "}\n";



        //Fragment Shader Source Code
        string fragmentShaderSource =
            "#version 330 core\n"
            "in vec3 oColor;"
            "in vec2 oTexCoord;"
            "in vec3 oNormal;"
            "in vec3 FragPos;"
            "out vec4 fragColor;"
            "uniform sampler2D myTexture;"
            "uniform vec3 objectColor;"
            "uniform vec3 lightColor;"
            "uniform vec3 lightPos;"
            "uniform vec3 viewPos;"
            "void main()\n"
            "{\n"
            "//Ambient\n"
            "float ambientStrength = 0.6f;"
            "vec3 ambient = ambientStrength * lightColor;"
            "//Diffuse\n"
            "vec3 norm = normalize(oNormal);"
            "vec3 lightDir = normalize(lightPos - FragPos);"
            "float diff = max(dot(norm, lightDir), 0.0);"
            "vec3 diffuse = diff * lightColor;"
            "//Specularity\n"
            "float specularStrength = 3.5f;"
            "vec3 viewDir = normalize(viewPos - FragPos);"
            "vec3 reflectDir = reflect(-lightDir, norm);"
            "float spec = pow(max(dot(viewDir, reflectDir),0.0),64);"
            "vec3 specular = specularStrength * spec * lightColor;"
            "vec3 result = (ambient + diffuse + specular) * objectColor;"
            "fragColor = texture(myTexture, oTexCoord) * vec4(result, 1.0f);"
            "}\n";


        // Vertex shader source code (Use only when light effect not wanted on labels)
        string labelVertexShaderSource =
            "#version 330 core\n"
            "layout(location = 0) in vec3 vPosition;"
            "layout(location = 1) in vec3 aColor;"
            "layout(location = 2) in vec2 texCoord;"
            "out vec3 oColor;"
            "out vec2 oTexCoord;"
            "uniform mat4 model;"
            "uniform mat4 view;"
            "uniform mat4 projection;"
            "void main()\n"
            "{\n"
            "gl_Position = projection * view * model * vec4(vPosition.x, vPosition.y, vPosition.z, 1.0);"
            "oColor = aColor;"
            "oTexCoord = texCoord;"
            "}\n";

        // Fragment shader source code (Use only when light effect not wanted on labels)
        string labelFragmentShaderSource =
            "#version 330 core\n"
            "in vec3 oColor;"
            "in vec2 oTexCoord;"
            "out vec4 fragColor;"
            "uniform sampler2D myTexture;"
            "void main()\n"
            "{\n"
            "fragColor = texture(myTexture, oTexCoord);"
            "}\n";

        // LampVertex shader source code
        string lampVertexShaderSource =
            "#version 330 core\n"
            "layout(location = 0) in vec3 vPosition;"
            "uniform mat4 model;"
            "uniform mat4 view;"
            "uniform mat4 projection;"
            "void main()\n"
            "{\n"
            "gl_Position = projection * view * model * vec4(vPosition.x, vPosition.y, vPosition.z, 1.0);"
            "}\n";

        // LampFragment shader source code
        string lampFragmentShaderSource =
            "#version 330 core\n"
            "out vec4 fragColor;"
            "void main()\n"
            "{\n"
            "fragColor = vec4(1.0f);"
            "}\n";


        //creating shader program
        GLuint shaderProgram = CreateShaderProgram(vertexShaderSource, fragmentShaderSource);
        GLuint labelShaderProgram = CreateShaderProgram(labelVertexShaderSource, labelFragmentShaderSource);
        GLuint lampShaderProgram = CreateShaderProgram(lampVertexShaderSource, lampFragmentShaderSource);


        // Resize window and graphics simultaneously
        glfwGetFramebufferSize(window, &width, &height);
        glViewport(0, 0, width, height);

        /* Render here ****/
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


        glUseProgram(shaderProgram);

                //Transforms the object
                glm::mat4 modelMatrix;
                glm::mat4 viewMatrix;
                glm::mat4 projectionMatrix;

                //declare matrix - week 5
                viewMatrix = glm::lookAt(cameraPosition, getTarget(), worldUp);

                //View type (Projection - Ortho)
                projectionMatrix = glm::perspective(fov, (GLfloat)width / (GLfloat)height, 0.1f, 100.f);

                //Retrieves and passes transform matrices to the shader program
                GLint modelLoc = glGetUniformLocation(shaderProgram, "model");
                GLint viewLoc = glGetUniformLocation(shaderProgram, "view");
                GLint projLoc = glGetUniformLocation(shaderProgram, "projection");

                //get light and object color, and light position
                GLint objectColorLoc = glGetUniformLocation(shaderProgram, "objectColor");
                GLint lightColorLoc = glGetUniformLocation(shaderProgram, "lightColor");
                GLint lightPosLoc = glGetUniformLocation(shaderProgram, "lightPos");
                GLint viewPosLoc = glGetUniformLocation(shaderProgram, "viewPos");

                //assign color  (rgb = n/255)
                glUniform3f(objectColorLoc, 0.765f, 0.89f, 0.909f);
                //Assign Light
                glUniform3f(lightColorLoc, 1.0f, 1.0f, 1.0f);
                //assign earth set light postion
                glUniform3f(lightPosLoc, lightPosition.x, lightPosition.y, lightPosition.z);
                //Specify View Pos
                glUniform3f(viewPosLoc, cameraPosition.x, cameraPosition.y, cameraPosition.z);

                //Pass transform to Shader            //Retrieves and passes transform matrices to the shader progra
                glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(modelMatrix));  //for copying and rotating
                glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(viewMatrix));
                glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(projectionMatrix));

                //Assign Texture
                glBindTexture(GL_TEXTURE_2D, wpTexture); // Apply crate texture (Auto detected by Uniform Sampler

                //Declare identity matrix
                glBindVertexArray(bottleBasVAO);   //CS499 Enhancement
                    //Draw primitive
                    draw();
                glBindVertexArray(0);

                //Declare identity matrix
                glBindVertexArray(bottleBotVAO);   //CS499 Enhancement
                    //Draw primitive
                    draw();
                glBindVertexArray(0);

                //Declare identity matrix
                glBindVertexArray(bottleMidVAO);   //CS499 Enhancement
                    //Draw primitive
                    drawMid();
                glBindVertexArray(0);

                //Declare identity matrix
                glBindVertexArray(bottleTopVAO);   //CS499 Enhancement
                    //Draw primitive
                    draw();
                glBindVertexArray(0);

                //Declare identity matrix
                glBindVertexArray(bottleNeckVAO);   //CS499 Enhancement
                    //Draw primitive
                    draw();
                glBindVertexArray(0);
                
                //Assign Texture
                glBindTexture(GL_TEXTURE_2D, bcTexture); // Apply crate texture (Auto detected by Uniform Sampler
                //Declare identity matrix
                glBindVertexArray(capVAO);
                    //Draw primitive
                    draw();
                glBindVertexArray(0);
        glUseProgram(0);

        /**/

        glUseProgram(shaderProgram);

                //Pass transform to Shader            //Retrieves and passes transform matrices to the shader progra
                glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(modelMatrix));  //for copying and rotating
                glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(viewMatrix));
                glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(projectionMatrix));

                //Assign Texture
                glBindTexture(GL_TEXTURE_2D, frontLabelTexture); // Apply crate texture (Auto detected by Uniform Sampler
                //Declare identity matrix
                glBindVertexArray(frontLabelVAO);
                    drawLabel();
                glBindVertexArray(0);
                
                glBindTexture(GL_TEXTURE_2D, rearLabelTexture); // Apply crate texture (Auto detected by Uniform Sampler
                glBindVertexArray(rearLabelVAO);
                    drawLabel();
                glBindVertexArray(0);

        glUseProgram(0);


        glUseProgram(lampShaderProgram);

            // Get matrix's uniform location and set matrix
            GLint lampModelLoc = glGetUniformLocation(lampShaderProgram, "model");
            GLint lampViewLoc = glGetUniformLocation(lampShaderProgram, "view");
            GLint lampProjLoc = glGetUniformLocation(lampShaderProgram, "projection");
            glUniformMatrix4fv(lampViewLoc, 1, GL_FALSE, glm::value_ptr(viewMatrix));
            glUniformMatrix4fv(lampProjLoc, 1, GL_FALSE, glm::value_ptr(projectionMatrix));

            glBindVertexArray(lampVAO); // User-defined VAO must be called before draw. 

                for (GLuint i = 0; i < 6; i++)
                {
                    glm::mat4 modelMatrix;
                    modelMatrix = glm::translate(modelMatrix, planePositions[i] / glm::vec3(8.0, 8.0, 8.0) + lightPosition);
                    modelMatrix = glm::rotate(modelMatrix, planeRotations[i] * toRadians, glm::vec3(0.0f, 1.0f, 0.0f));
                    modelMatrix = glm::scale(modelMatrix, glm::vec3(.125f, .125f, .125f));
                    if (i >= 4)
                        modelMatrix = glm::rotate(modelMatrix, planeRotations[i] * toRadians, glm::vec3(1.0f, 0.0f, 0.0f));
                    glUniformMatrix4fv(lampModelLoc, 1, GL_FALSE, glm::value_ptr(modelMatrix));
                    // Draw primitive(s)
                    draw();
                }

                glBindVertexArray(0); //Incase different VAO wii be used after

        glUseProgram(0);

        //*/

        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();

        //poll camera transformations
        TransformCamera();
        //Clear GPU resources
        glDeleteVertexArrays(1, &bottleBasVAO);   //CS499 Enhancement
        glDeleteBuffers(1, &bottleBasVBO);        //CS499 Enhancement
        glDeleteBuffers(1, &bottleBasEBO);        //CS499 Enhancement
        glDeleteVertexArrays(1, &bottleBotVAO);   //CS499 Enhancement
        glDeleteBuffers(1, &bottleBotVBO);        //CS499 Enhancement
        glDeleteBuffers(1, &bottleBotEBO);        //CS499 Enhancement
        glDeleteVertexArrays(1, &bottleMidVAO);   //CS499 Enhancement
        glDeleteBuffers(1, &bottleMidVBO);        //CS499 Enhancement
        glDeleteBuffers(1, &bottleMidEBO);        //CS499 Enhancement
        glDeleteVertexArrays(1, &bottleTopVAO);   //CS499 Enhancement
        glDeleteBuffers(1, &bottleTopVBO);        //CS499 Enhancement
        glDeleteBuffers(1, &bottleTopEBO);        //CS499 Enhancement
        glDeleteVertexArrays(1, &bottleNeckVAO);   //CS499 Enhancement
        glDeleteBuffers(1, &bottleNeckVBO);        //CS499 Enhancement
        glDeleteBuffers(1, &bottleNeckEBO);        //CS499 Enhancement
        glDeleteVertexArrays(1, &capVAO);
        glDeleteBuffers(1, &capVBO);
        glDeleteBuffers(1, &capEBO);
        glDeleteVertexArrays(1, &frontLabelVAO);
        glDeleteBuffers(1, &frontLabelVBO);
        glDeleteBuffers(1, &frontLabelEBO);
        glDeleteVertexArrays(1, &rearLabelVAO);
        glDeleteBuffers(1, &rearLabelVAO);
        glDeleteBuffers(1, &rearLabelVAO);

    }

    glfwTerminate();
    return 0;
}




//Define Input Callback Functions
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
    if (action == GLFW_PRESS)
        keys[key] = true;
    else if (action == GLFW_RELEASE)
        keys[key] = false;

}
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
    //clamp fov
    if (fov >= 1.0f && fov <= 100.0f)
        fov -= yoffset * 0.01f;

    // default fov
    if (fov < 1.0f)
        fov = 1.0f;
    if (fov > 100.0f)
        fov = 100.0f;
}
void cursor_position_callback(GLFWwindow* window, double xpos, double ypos)
{	
    if (firstMouseMove)
    {
        lastX = xpos;
        lastY = ypos;
        firstMouseMove = false;
    }

    //Calculate Cursor offset
    xChange = xpos - lastX;

    //inverted controls
    yChange = lastY - ypos;

    lastX = xpos;
    lastY = ypos;

    //pan Camera
    if (isPanning)
    {

        if (cameraPosition.z < 0.0f)
            cameraFront.z = 1.0f;
        else
            cameraFront.z = -1.0f;

        GLfloat cameraSpeed = xChange * deltaTime;
        cameraPosition += cameraSpeed * cameraRight;  //Pan Left Right

        cameraSpeed = yChange * deltaTime;
        cameraPosition += cameraSpeed * cameraUp;     //pan Up Down
    }

    //orbit Camera
    if (isOrbiting)
    {
        rawYaw += xChange;
        rawPitch += yChange;
        // Convert Yaw and Pitch to deg
        degYaw = glm::radians(rawYaw);
        //degPitch = glm::radians(rawPitch);
        degPitch = glm::clamp(glm::radians(rawPitch), -glm::pi<float>() / 2.0f + 0.1f, glm::pi<float>() / 2.0f - 0.1f);

        //Azimuth Altitude formula
        cameraPosition.x = target.x + radius * cosf(degPitch) * sinf(degYaw);
        cameraPosition.y = target.y + radius * sinf(degPitch);
        cameraPosition.z = target.z + radius * cosf(degPitch) * cosf(degYaw);
    }
}


void mouse_button_callback(GLFWwindow* window, int button, int action, int mods)
{	
    if (action == GLFW_PRESS)
        mouseButtons[button] = true;
    else if (action == GLFW_RELEASE)
        mouseButtons[button] = false;
}


glm::vec3 getTarget()
{
    if (isPanning)
        target = cameraPosition + cameraFront;
    return target;

}


//Define Transform Camera Function
void TransformCamera()
{

    //Pan Camera
    if (keys[GLFW_KEY_LEFT_ALT] && mouseButtons[GLFW_MOUSE_BUTTON_MIDDLE])
        isPanning = true;
    else
        isPanning = false;

    //orbit Camera
    if (keys[GLFW_KEY_LEFT_ALT] && mouseButtons[GLFW_MOUSE_BUTTON_LEFT])
        isOrbiting = true;
    else
        isOrbiting = false;

    //Reset Camera
    if (keys[GLFW_KEY_F])
        initCamera();


}


void initCamera()
{
    cameraPosition = glm::vec3(0.0f, 6.0f, 4.0f); 	//Initial camera position. Placed S units in Z
    target = glm::vec3(0.0f, 1.5f, 0.0f);
    CameraDirection = glm::normalize(cameraPosition - target);
    worldUp = glm::vec3(0.0f, 1.0f, 0.0f);
    cameraRight = glm::normalize(glm::cross(worldUp, CameraDirection));
    cameraUp = glm::normalize(glm::cross(cameraRight, CameraDirection));
    cameraFront = glm::normalize(glm::vec3(0.0f, 0.0f, -1.0f));
}
